// Exercises Ch6

6.1 | a) arrays
    | b) index
    | c) macro
    | d) sorting
    | e) searching
    | f) two-dimensional

6.2 | a) False. An array can only store one type of variable.
    | b) False. Array subscripts are only type of int.
    | c) False. They are initialized with zero
    | d) True
    | e) False. Individual elements are passed by value. Should pass the array instead.

6.3 | a) #define SIZE 10
    | b) double fractions[SIZE] = {0.0};
    | c) fractions[4];
    | d) fractions[9] = 1.667;
    | e) fractions[6] = 3.333;
    | f) printf("%.2f %.2f\n", fractions[6], fractions[9]); // 3.33 1.67
    | g) for (int x = 0; x < SIZE; x++) { printf("%.3f ", fractions[x]); }
    |   // 0 0 0 0 0 0 1.667 0 0 3.333

6.4 | a) int table[SIZE][SIZE];
    | b) printf("%d", SIZE * SIZE);
    | c) for (int x = 0; x < SIZE; x++) { 
    |       for (int y = 0; y < SIZE; y++) {
    |           table[x][y] = x + y; 
    |       }
    |    }
    | d) for (int x = 0; x < SIZE; x++) { 
    |       for (int y = 0; y < SIZE; y++) {
    |           printf("table[%d][%d] = %d\n", x, y, table[x][y]); 
    |       }
    |    }

6.5 | a) Error: Semicolon after macro definition.
    |    Correction: #define SIZE 100
    | b) Error: Cannot assign to a symbolic constant.
    |    Correction: #define SIZE 10 
    | c) Error: Array ends in b[9]. Accessing b[10] is an error. 
    |    Correction: for (size_t i = 0; i < 10; ++i)
    | d) Error: Semicolon after #include statement.
    |    Correction: #include <stdio.h>
    | e) Error: Wrong syntax for accessing two-dimensional arrays.
    |    Correction: a[1][1] = 5;
    | f) Error: Wrong use of a macro. VALUE will be equal to "= 120".
    |    Correction: #define VALUE 120

6.6 | a) arrays
    | b) are contiguous
    | c) index
    | d) p[0], p[1], p[2], p[3], p[4] 
    | e) value
    | f) initializing
    | g) sorting
    | h) rows, columns
    | i) m, n, m*n
    | j) d[2][4]

6.7 | a) False. Specify the index of the element.
    | b) True
    | c) False. Write int p[100];.
    | d) False. This statement can do it too: int array[15] = {0};.
    | e) True
    | f) True

6.8 | a) printf("%c", f[6]);
    | b) scanf("%f", &b[3]);
    | c) int g[5] = {8, 8, 8, 8, 8};
    | d) for (int i = 0; i < 100; i++) {
    |        total += c[i]; 
    |    } 
    | e) for (int i = 0; i < 11; i++) {
    |        b[i] = a[i]; 
    |    } 
    | f) min = w[0];
    |    max = w[0];
    |    for (int i = 0; i < 99; i++) {
    |        if (w[i] < min) { 
    |            min = t[i][j]; 
    |        } 
    |        if (w[i] > max) { 
    |            max = t[i][j]; 
    |        } 
    |    }
    |    printf("Smallest value is %d\n", min); 
    |    printf("Largest value is %d\n", max); 

6.9 | a) int t[2][5];
    | b) 2
    | c) 5
    | d) 10
    | e) t[1][0], t[1][1], t[1][2], t[1][3], t[1][4]
    | f) t[0][2], t[1][2]
    | g) t[0][1] = 0;
    | h) int t[2][5] = {{0}, {0}};
    | i) for (int i = 0; i < 2; i++) { 
    |       for (int j = 0; j < 5; j++) {
    |           t[i][j] = 0; 
    |       }
    |    } 
    | j) for (int i = 0; i < 2; i++) { 
    |       for (int j = 0; j < 5; j++) {
    |           scanf("%d", &t[i][j]); 
    |       }
    |    } 
    | k) min = t[0][0];
    |    for (int i = 0; i < 2; i++) { 
    |       for (int j = 0; j < 5; j++) {
    |           if (t[i][j] < min) { 
    |               min = t[i][j]; 
    |           } 
    |       }
    |    } 
    |    printf("Smallest value is %d\n", min); 
    | l) for (int i = 0; i < 5; i++) {
    |        printf("%d ", t[0][i]); 
    |    }
    | m) for (int i = 0; i < 2; i++) {
    |        total += t[i][3]; 
    |    }
    | n)    printf("    %3d%3d%3d%3d%3d\n", 1, 2, 3, 4, 5);
    |       printf("    %3s%3s%3s%3s%3s\n", "--", "--", "--", "--", "--");
    |       for (int i = 0; i < 2; i++) {
    |           printf("  %d|", i+1);
    |           for (int j = 0; j < 5; j++) {
    |               printf("%3d", t[i][j]);
    |           }
    |           printf("\n\n");
    |       } 
